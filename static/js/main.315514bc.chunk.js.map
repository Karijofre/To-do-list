{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","filteredHandler","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOA8CeA,EA3CF,SAAC,GAA4D,IAAzDC,EAAwD,EAAxDA,aAAcC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,UAmBvD,OACI,iCACE,uBACEC,MAAQF,EACRG,SArBiB,SAACC,GACxBP,EAAaO,EAAEC,OAAOH,QAqBhBI,KAAK,OACLC,UAAU,eACZ,wBAAQC,QApBY,SAACJ,GACzBA,EAAEK,iBACFV,EAAS,GAAD,mBACHD,GADG,CAEN,CAACY,KAAOV,EAAWW,WAAW,EAAOC,GAAoB,IAAhBC,KAAKC,aAEhDjB,EAAa,KAc6BU,UAAU,cAAcD,KAAK,SAAnE,SACE,mBAAGC,UAAU,yBAEhB,qBAAKA,UAAU,SAAf,SACG,yBACEJ,SAhBY,SAACC,GACrBH,EAAUG,EAAEC,OAAOH,QAgBXa,KAAK,QACLR,UAAU,cAHZ,UAIE,wBAAQL,MAAM,MAAd,iBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,cAAd,kC,OCACc,EArCF,SAAC,GAAkC,IAAjCN,EAAgC,EAAhCA,KAAMO,EAA0B,EAA1BA,KAAMnB,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,SAiB9B,OACG,sBAAKQ,UAAW,OAAhB,UACI,oBAAIA,UAAS,oBAAgBU,EAAKN,UAAY,YAAc,IAA5D,SACMD,IAEN,wBACKF,QAjBW,WACpBT,EAASD,EAAMoB,KAAI,SAAAC,GACf,OAAGA,EAAKP,KAAOK,EAAKL,GAChB,2BACOO,GADP,IACaR,WAAaQ,EAAKR,YAG5BQ,OAWFZ,UAAW,eAFhB,SAGS,mBAAGA,UAAW,mBAEvB,wBACKC,QA1BU,WAClBT,EAASD,EAAMsB,QAAO,SAACC,GAAD,OAAOA,EAAGT,KAAOK,EAAKL,QA0BpCL,UAAW,YAFhB,SAGS,mBAAGA,UAAW,uBCLnBe,EAvBE,SAAC,GAAuC,IAArCxB,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAAUwB,EAAmB,EAAnBA,cAE7B,OACI,qBAAKhB,UAAU,iBAAf,SACI,oBAAIA,UAAU,YAAd,SACKgB,EAAcL,KAAI,SAACD,GAAD,OACf,cAAC,EAAD,CACIP,KAAMO,EAAKP,KAEXZ,MAAOA,EACPC,SAAUA,EACVkB,KAAMA,GAHDA,EAAKL,YC8CvBY,MAjDf,WAEE,MAAkCC,mBAAS,IAA3C,mBAAOzB,EAAP,KAAkBH,EAAlB,KACA,EAA0B4B,mBAAS,IAAnC,mBAAO3B,EAAP,KAAcC,EAAd,KACA,EAA4B0B,mBAAS,OAArC,mBAAOC,EAAP,KAAezB,EAAf,KACA,EAA0CwB,mBAAS,IAAnD,mBAAOF,EAAP,KAAsBI,EAAtB,KAuBA,OArBAC,qBAAU,YAEgB,WACtB,OAAOF,GACL,IAAK,YACHC,EAAiB7B,EAAMsB,QAAO,SAAAH,GAAI,OAAuB,IAAnBA,EAAKN,cAC3C,MACA,IAAK,cACHgB,EAAiB7B,EAAMsB,QAAO,SAAAH,GAAI,OAAuB,IAAnBA,EAAKN,cAC7C,MACA,QACEgB,EAAiB7B,IAKzB+B,KACA,CAAC/B,EAAO4B,IAKR,gCACE,iCACA,6DAEA,cAAC,EAAD,CACE1B,UAAaA,EACbF,MAASA,EACTC,SAAYA,EACZF,aAAeA,EACfI,UAAWA,IAEb,cAAC,EAAD,CACEH,MAAOA,EACPC,SAAUA,EACVwB,cAAeA,QC9CvBO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.315514bc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Form = ( { setInputText, todos, setTodos, inputText, setStatus}) =>{\r\n\r\n    const inputTextHandler = (e) =>{\r\n      setInputText(e.target.value);\r\n    };\r\n\r\n    const submitTodoHandler = (e) =>{\r\n      e.preventDefault();\r\n      setTodos([\r\n        ...todos,\r\n        {text : inputText, completed: false, id: Math.random() * 1000 },\r\n      ]);\r\n      setInputText(\"\");\r\n    };\r\n\r\n    const statusHandler = (e) =>{\r\n      setStatus(e.target.value)\r\n    }\r\n\r\n    return(\r\n        <form>\r\n          <input \r\n            value= {inputText}\r\n            onChange= {inputTextHandler} \r\n            type=\"text\" \r\n            className=\"todo-input\" />\r\n          <button onClick= { submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n            <i className=\"fas fa-plus-square\"></i>\r\n          </button>\r\n         <div className=\"select\">\r\n            <select \r\n              onChange= {statusHandler} \r\n              name=\"todos\" \r\n              className=\"filter-todo\">\r\n              <option value=\"all\">All</option>\r\n              <option value=\"completed\">Completed</option>\r\n              <option value=\"uncompleted\">Uncompleted</option>\r\n           </select>\r\n          </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React  from \"react\";\r\n\r\nconst Todo = ({text, todo, todos, setTodos}) =>{\r\n\r\n    const deleteHandler = ()=>{\r\n        setTodos(todos.filter((el) =>el.id !== todo.id));\r\n    };\r\n\r\n   const completeHandler = () =>{\r\n       setTodos(todos.map(item =>{\r\n           if(item.id === todo.id){\r\n               return{\r\n                   ...item, completed : !item.completed\r\n               }\r\n           }\r\n           return item;\r\n       }))\r\n   }\r\n\r\n    return(\r\n       <div className= \"todo\">\r\n           <li className= {`todo-item ${todo.completed ? \"completed\" : \"\" }`}>\r\n                {text}\r\n           </li>\r\n           <button\r\n                onClick={completeHandler}\r\n                className= \"complete-btn\" >\r\n                    <i className= \"fas fa-check\" ></i>\r\n            </button>\r\n           <button \r\n                onClick={deleteHandler} \r\n                className= \"trash-btn\" >\r\n                    <i className= \"fas fa-trash\" ></i>\r\n            </button>\r\n       </div> \r\n    );\r\n};\r\n\r\n\r\nexport default Todo;","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) =>{\r\n        \r\n        return(\r\n            <div className=\"todo-container\">\r\n                <ul className=\"todo-list\">\r\n                    {filteredTodos.map((todo) =>(\r\n                        <Todo \r\n                            text={todo.text}\r\n                            key={todo.id}\r\n                            todos={todos}\r\n                            setTodos={setTodos}\r\n                            todo={todo}\r\n                        />\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n    \r\n};\r\n\r\n   \r\n\r\n\r\nexport default TodoList;","import React, { useState, useEffect } from \"react\";\r\nimport './App.css';\r\nimport Form from \"./components/Form\";\r\nimport TodoList from \"./components/TodoList\";\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n  const [status, setStatus] = useState(\"all\");\r\n  const [filteredTodos, setFilteredTodos] = useState([]);\r\n\r\n  useEffect(() =>{\r\n\r\n    const filteredHandler = () =>{\r\n      switch(status){\r\n        case \"completed\":\r\n          setFilteredTodos(todos.filter(todo => todo.completed === true));\r\n          break;\r\n          case \"uncompleted\":\r\n            setFilteredTodos(todos.filter(todo => todo.completed === false));\r\n          break;\r\n          default:\r\n            setFilteredTodos(todos);\r\n            break;\r\n      };\r\n    };\r\n\r\n    filteredHandler();\r\n  },[todos, status]);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n      <h1> To Do List ðŸ“‘ </h1>\r\n      </header>\r\n      <Form \r\n        inputText = {inputText}\r\n        todos = {todos}\r\n        setTodos = {setTodos}\r\n        setInputText= {setInputText}\r\n        setStatus={setStatus}\r\n      />\r\n      <TodoList \r\n        todos={todos}\r\n        setTodos={setTodos}\r\n        filteredTodos={filteredTodos}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}